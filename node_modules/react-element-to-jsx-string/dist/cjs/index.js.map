{"version":3,"file":"index.js","sources":["../../src/formatter/spacer.js","../../node_modules/is-plain-object/index.es.js","../../node_modules/@base2/pretty-print-object/dist/index.js","../../src/formatter/sortObject.js","../../src/tree.js","../../src/parser/parseReactElement.js","../../src/formatter/formatFunction.js","../../src/formatter/formatComplexDataStructure.js","../../src/formatter/formatPropValue.js","../../src/formatter/formatProp.js","../../src/formatter/mergeSiblingPlainStringChildrenReducer.js","../../src/formatter/sortPropsByNames.js","../../src/formatter/createPropFilter.js","../../src/formatter/formatReactElementNode.js","../../src/formatter/formatReactFragmentNode.js","../../src/formatter/formatTreeNode.js","../../src/formatter/formatTree.js","../../src/index.js"],"sourcesContent":["/* @flow */\n\nexport default (times: number, tabStop: number): string => {\n  if (times === 0) {\n    return '';\n  }\n\n  return new Array(times * tabStop).fill(' ').join('');\n};\n","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(val) {\n  return val != null && typeof val === 'object' && Array.isArray(val) === false;\n}\n\n/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObjectObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport default isPlainObject;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar seen = [];\n/**\n * Check if a value is an object or a function. Keep in mind that array, function, regexp, etc, are objects in JavaScript.\n *\n * @param value the value to check\n * @return true if the value is an object or a function\n */\nfunction isObj(value) {\n    var type = typeof value;\n    return value !== null && (type === 'object' || type === 'function');\n}\n/**\n * Check if a value is a regular expression.\n *\n * @param value the value to check\n * @return true if the value is a regular expression\n */\nfunction isRegexp(value) {\n    return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n/**\n * Get an array of all of the enumerable symbols for an object.\n *\n * @param object the object to get the enumerable symbols for\n */\nfunction getOwnEnumPropSymbols(object) {\n    return Object.getOwnPropertySymbols(object).filter(function (keySymbol) { return Object.prototype.propertyIsEnumerable.call(object, keySymbol); });\n}\n/**\n * pretty print an object\n *\n * @param input the object to pretty print\n * @param options the formatting options, transforms, and filters\n * @param pad the padding string\n */\nfunction prettyPrint(input, options, pad) {\n    if (pad === void 0) { pad = ''; }\n    // sensible option defaults\n    var defaultOptions = {\n        indent: '\\t',\n        singleQuotes: true\n    };\n    var combinedOptions = __assign(__assign({}, defaultOptions), options);\n    var tokens;\n    if (combinedOptions.inlineCharacterLimit === undefined) {\n        tokens = {\n            newLine: '\\n',\n            newLineOrSpace: '\\n',\n            pad: pad,\n            indent: pad + combinedOptions.indent\n        };\n    }\n    else {\n        tokens = {\n            newLine: '@@__PRETTY_PRINT_NEW_LINE__@@',\n            newLineOrSpace: '@@__PRETTY_PRINT_NEW_LINE_OR_SPACE__@@',\n            pad: '@@__PRETTY_PRINT_PAD__@@',\n            indent: '@@__PRETTY_PRINT_INDENT__@@'\n        };\n    }\n    var expandWhiteSpace = function (string) {\n        if (combinedOptions.inlineCharacterLimit === undefined) {\n            return string;\n        }\n        var oneLined = string\n            .replace(new RegExp(tokens.newLine, 'g'), '')\n            .replace(new RegExp(tokens.newLineOrSpace, 'g'), ' ')\n            .replace(new RegExp(tokens.pad + '|' + tokens.indent, 'g'), '');\n        if (oneLined.length <= combinedOptions.inlineCharacterLimit) {\n            return oneLined;\n        }\n        return string\n            .replace(new RegExp(tokens.newLine + '|' + tokens.newLineOrSpace, 'g'), '\\n')\n            .replace(new RegExp(tokens.pad, 'g'), pad)\n            .replace(new RegExp(tokens.indent, 'g'), pad + combinedOptions.indent);\n    };\n    if (seen.indexOf(input) !== -1) {\n        return '\"[Circular]\"';\n    }\n    if (input === null ||\n        input === undefined ||\n        typeof input === 'number' ||\n        typeof input === 'boolean' ||\n        typeof input === 'function' ||\n        typeof input === 'symbol' ||\n        isRegexp(input)) {\n        return String(input);\n    }\n    if (input instanceof Date) {\n        return \"new Date('\" + input.toISOString() + \"')\";\n    }\n    if (Array.isArray(input)) {\n        if (input.length === 0) {\n            return '[]';\n        }\n        seen.push(input);\n        var ret = '[' + tokens.newLine + input.map(function (el, i) {\n            var eol = input.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n            var value = prettyPrint(el, combinedOptions, pad + combinedOptions.indent);\n            if (combinedOptions.transform) {\n                value = combinedOptions.transform(input, i, value);\n            }\n            return tokens.indent + value + eol;\n        }).join('') + tokens.pad + ']';\n        seen.pop();\n        return expandWhiteSpace(ret);\n    }\n    if (isObj(input)) {\n        var objKeys_1 = __spreadArrays(Object.keys(input), (getOwnEnumPropSymbols(input)));\n        if (combinedOptions.filter) {\n            objKeys_1 = objKeys_1.filter(function (el) { return combinedOptions.filter && combinedOptions.filter(input, el); });\n        }\n        if (objKeys_1.length === 0) {\n            return '{}';\n        }\n        seen.push(input);\n        var ret = '{' + tokens.newLine + objKeys_1.map(function (el, i) {\n            var eol = objKeys_1.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n            var isSymbol = typeof el === 'symbol';\n            var isClassic = !isSymbol && /^[a-z$_][a-z$_0-9]*$/i.test(el.toString());\n            var key = isSymbol || isClassic ? el : prettyPrint(el, combinedOptions);\n            var value = prettyPrint(input[el], combinedOptions, pad + combinedOptions.indent);\n            if (combinedOptions.transform) {\n                value = combinedOptions.transform(input, el, value);\n            }\n            return tokens.indent + String(key) + ': ' + value + eol;\n        }).join('') + tokens.pad + '}';\n        seen.pop();\n        return expandWhiteSpace(ret);\n    }\n    input = String(input).replace(/[\\r\\n]/g, function (x) { return x === '\\n' ? '\\\\n' : '\\\\r'; });\n    if (!combinedOptions.singleQuotes) {\n        input = input.replace(/\"/g, '\\\\\"');\n        return \"\\\"\" + input + \"\\\"\";\n    }\n    input = input.replace(/\\\\?'/g, '\\\\\\'');\n    return \"'\" + input + \"'\";\n}\nexports.prettyPrint = prettyPrint;\n//# sourceMappingURL=index.js.map","/* @flow */\n\nexport default function sortObject(value: any): any {\n  // return non-object value as is\n  if (value === null || typeof value !== 'object') {\n    return value;\n  }\n\n  // return date and regexp values as is\n  if (value instanceof Date || value instanceof RegExp) {\n    return value;\n  }\n\n  // make a copy of array with each item passed through sortObject()\n  if (Array.isArray(value)) {\n    return value.map(sortObject);\n  }\n\n  // make a copy of object with key sorted\n  return Object.keys(value)\n    .sort()\n    .reduce((result, key) => {\n      if (key === '_owner') {\n        return result;\n      }\n      if (key === 'current') {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = '[Circular]';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = sortObject(value[key]);\n      }\n      return result;\n    }, {});\n}\n","/* @flow */\n/* eslint-disable no-use-before-define */\n\nimport type { Key } from 'react';\n\ntype PropsType = { [key: string]: any };\ntype DefaultPropsType = { [key: string]: any };\n\nexport type StringTreeNode = {|\n  type: 'string',\n  value: string,\n|};\n\nexport type NumberTreeNode = {|\n  type: 'number',\n  value: number,\n|};\n\nexport type ReactElementTreeNode = {|\n  type: 'ReactElement',\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[],\n|};\n\nexport type ReactFragmentTreeNode = {|\n  type: 'ReactFragment',\n  key: ?Key,\n  childrens: TreeNode[],\n|};\n\nexport type TreeNode =\n  | StringTreeNode\n  | NumberTreeNode\n  | ReactElementTreeNode\n  | ReactFragmentTreeNode;\n\nexport const createStringTreeNode = (value: string): StringTreeNode => ({\n  type: 'string',\n  value,\n});\n\nexport const createNumberTreeNode = (value: number): NumberTreeNode => ({\n  type: 'number',\n  value,\n});\n\nexport const createReactElementTreeNode = (\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[]\n): ReactElementTreeNode => ({\n  type: 'ReactElement',\n  displayName,\n  props,\n  defaultProps,\n  childrens,\n});\n\nexport const createReactFragmentTreeNode = (\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactFragmentTreeNode => ({\n  type: 'ReactFragment',\n  key,\n  childrens,\n});\n","/* @flow */\n\nimport React, { type Element as ReactElement, Fragment } from 'react';\nimport type { Options } from './../options';\nimport {\n  createStringTreeNode,\n  createNumberTreeNode,\n  createReactElementTreeNode,\n  createReactFragmentTreeNode,\n} from './../tree';\nimport type { TreeNode } from './../tree';\n\nconst supportFragment = Boolean(Fragment);\n\nconst getReactElementDisplayName = (element: ReactElement<*>): string =>\n  element.type.displayName ||\n  (element.type.name !== '_default' ? element.type.name : null) || // function name\n  (typeof element.type === 'function' // function without a name, you should provide one\n    ? 'No Display Name'\n    : element.type);\n\nconst noChildren = (propsValue, propName) => propName !== 'children';\n\nconst onlyMeaningfulChildren = (children): boolean =>\n  children !== true &&\n  children !== false &&\n  children !== null &&\n  children !== '';\n\nconst filterProps = (originalProps: {}, cb: (any, string) => boolean) => {\n  const filteredProps = {};\n\n  Object.keys(originalProps)\n    .filter(key => cb(originalProps[key], key))\n    .forEach(key => (filteredProps[key] = originalProps[key]));\n\n  return filteredProps;\n};\n\nconst parseReactElement = (\n  element: ReactElement<*> | string | number,\n  options: Options\n): TreeNode => {\n  const { displayName: displayNameFn = getReactElementDisplayName } = options;\n\n  if (typeof element === 'string') {\n    return createStringTreeNode(element);\n  } else if (typeof element === 'number') {\n    return createNumberTreeNode(element);\n  } else if (!React.isValidElement(element)) {\n    throw new Error(\n      `react-element-to-jsx-string: Expected a React.Element, got \\`${typeof element}\\``\n    );\n  }\n\n  const displayName = displayNameFn(element);\n\n  const props = filterProps(element.props, noChildren);\n  if (element.ref !== null) {\n    props.ref = element.ref;\n  }\n\n  const key = element.key;\n  if (typeof key === 'string' && key.search(/^\\./)) {\n    // React automatically add key=\".X\" when there are some children\n    props.key = key;\n  }\n\n  const defaultProps = filterProps(element.type.defaultProps || {}, noChildren);\n  const childrens = React.Children.toArray(element.props.children)\n    .filter(onlyMeaningfulChildren)\n    .map(child => parseReactElement(child, options));\n\n  if (supportFragment && element.type === Fragment) {\n    return createReactFragmentTreeNode(key, childrens);\n  }\n\n  return createReactElementTreeNode(\n    displayName,\n    props,\n    defaultProps,\n    childrens\n  );\n};\n\nexport default parseReactElement;\n","import type { Options } from './../options';\n\nfunction noRefCheck() {}\n\nexport const inlineFunction = (fn: any): string =>\n  fn\n    .toString()\n    .split('\\n')\n    .map(line => line.trim())\n    .join('');\n\nexport const preserveFunctionLineBreak = (fn: any): string => fn.toString();\n\nconst defaultFunctionValue = inlineFunction;\n\nexport default (fn: Function, options: Options): string => {\n  const { functionValue = defaultFunctionValue, showFunctions } = options;\n  if (!showFunctions && functionValue === defaultFunctionValue) {\n    return functionValue(noRefCheck);\n  }\n\n  return functionValue(fn);\n};\n","/* @flow */\n\nimport { isValidElement } from 'react';\nimport { prettyPrint } from '@base2/pretty-print-object';\nimport sortObject from './sortObject';\nimport parseReactElement from './../parser/parseReactElement';\nimport formatTreeNode from './formatTreeNode';\nimport formatFunction from './formatFunction';\nimport spacer from './spacer';\nimport type { Options } from './../options';\n\nexport default (\n  value: Object | Array<any>,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const normalizedValue = sortObject(value);\n\n  const stringifiedValue = prettyPrint(normalizedValue, {\n    transform: (currentObj, prop, originalResult) => {\n      const currentValue = currentObj[prop];\n\n      if (currentValue && isValidElement(currentValue)) {\n        return formatTreeNode(\n          parseReactElement(currentValue, options),\n          true,\n          lvl,\n          options\n        );\n      }\n\n      if (typeof currentValue === 'function') {\n        return formatFunction(currentValue, options);\n      }\n\n      return originalResult;\n    },\n  });\n\n  if (inline) {\n    return stringifiedValue\n      .replace(/\\s+/g, ' ')\n      .replace(/{ /g, '{')\n      .replace(/ }/g, '}')\n      .replace(/\\[ /g, '[')\n      .replace(/ ]/g, ']');\n  }\n\n  // Replace tabs with spaces, and add necessary indentation in front of each new line\n  return stringifiedValue\n    .replace(/\\t/g, spacer(1, options.tabStop))\n    .replace(/\\n([^$])/g, `\\n${spacer(lvl + 1, options.tabStop)}$1`);\n};\n","/* @flow */\n\nimport isPlainObject from 'is-plain-object';\nimport { isValidElement } from 'react';\nimport formatComplexDataStructure from './formatComplexDataStructure';\nimport formatFunction from './formatFunction';\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport parseReactElement from './../parser/parseReactElement';\n\nconst escape = (s: string): string => s.replace(/\"/g, '&quot;');\n\nconst formatPropValue = (\n  propValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (typeof propValue === 'number') {\n    return `{${String(propValue)}}`;\n  }\n\n  if (typeof propValue === 'string') {\n    return `\"${escape(propValue)}\"`;\n  }\n\n  // > \"Symbols (new in ECMAScript 2015, not yet supported in Flow)\"\n  // @see: https://flow.org/en/docs/types/primitives/\n  // $FlowFixMe: Flow does not support Symbol\n  if (typeof propValue === 'symbol') {\n    const symbolDescription = propValue\n      .valueOf()\n      .toString()\n      .replace(/Symbol\\((.*)\\)/, '$1');\n\n    if (!symbolDescription) {\n      return `{Symbol()}`;\n    }\n\n    return `{Symbol('${symbolDescription}')}`;\n  }\n\n  if (typeof propValue === 'function') {\n    return `{${formatFunction(propValue, options)}}`;\n  }\n\n  if (isValidElement(propValue)) {\n    return `{${formatTreeNode(\n      parseReactElement(propValue, options),\n      true,\n      lvl,\n      options\n    )}}`;\n  }\n\n  if (propValue instanceof Date) {\n    return `{new Date(\"${propValue.toISOString()}\")}`;\n  }\n\n  if (isPlainObject(propValue) || Array.isArray(propValue)) {\n    return `{${formatComplexDataStructure(propValue, inline, lvl, options)}}`;\n  }\n\n  return `{${String(propValue)}}`;\n};\n\nexport default formatPropValue;\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatPropValue from './formatPropValue';\nimport type { Options } from './../options';\n\nexport default (\n  name: string,\n  hasValue: boolean,\n  value: any,\n  hasDefaultValue: boolean,\n  defaultValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): {\n  attributeFormattedInline: string,\n  attributeFormattedMultiline: string,\n  isMultilineAttribute: boolean,\n} => {\n  if (!hasValue && !hasDefaultValue) {\n    throw new Error(\n      `The prop \"${name}\" has no value and no default: could not be formatted`\n    );\n  }\n\n  const usedValue = hasValue ? value : defaultValue;\n\n  const { useBooleanShorthandSyntax, tabStop } = options;\n\n  const formattedPropValue = formatPropValue(usedValue, inline, lvl, options);\n\n  let attributeFormattedInline = ' ';\n  let attributeFormattedMultiline = `\\n${spacer(lvl + 1, tabStop)}`;\n  const isMultilineAttribute = formattedPropValue.includes('\\n');\n\n  if (\n    useBooleanShorthandSyntax &&\n    formattedPropValue === '{false}' &&\n    !hasDefaultValue\n  ) {\n    // If a boolean is false and not different from it's default, we do not render the attribute\n    attributeFormattedInline = '';\n    attributeFormattedMultiline = '';\n  } else if (useBooleanShorthandSyntax && formattedPropValue === '{true}') {\n    attributeFormattedInline += `${name}`;\n    attributeFormattedMultiline += `${name}`;\n  } else {\n    attributeFormattedInline += `${name}=${formattedPropValue}`;\n    attributeFormattedMultiline += `${name}=${formattedPropValue}`;\n  }\n\n  return {\n    attributeFormattedInline,\n    attributeFormattedMultiline,\n    isMultilineAttribute,\n  };\n};\n","/* @flow */\n\nimport { createStringTreeNode } from './../tree';\nimport type { TreeNode } from './../tree';\n\nexport default (\n  previousNodes: TreeNode[],\n  currentNode: TreeNode\n): TreeNode[] => {\n  const nodes = previousNodes.slice(\n    0,\n    previousNodes.length > 0 ? previousNodes.length - 1 : 0\n  );\n  const previousNode = previousNodes[previousNodes.length - 1];\n\n  if (\n    previousNode &&\n    (currentNode.type === 'string' || currentNode.type === 'number') &&\n    (previousNode.type === 'string' || previousNode.type === 'number')\n  ) {\n    nodes.push(\n      createStringTreeNode(\n        String(previousNode.value) + String(currentNode.value)\n      )\n    );\n  } else {\n    if (previousNode) {\n      nodes.push(previousNode);\n    }\n\n    nodes.push(currentNode);\n  }\n\n  return nodes;\n};\n","/* @flow */\n\nconst isKeyOrRefProps = (propName: string) => ['key', 'ref'].includes(propName);\n\nexport default (shouldSortUserProps: boolean) => (\n  props: string[]\n): string[] => {\n  const haveKeyProp = props.includes('key');\n  const haveRefProp = props.includes('ref');\n\n  const userPropsOnly = props.filter(oneProp => !isKeyOrRefProps(oneProp));\n\n  const sortedProps = shouldSortUserProps\n    ? [...userPropsOnly.sort()] // We use basic lexical order\n    : [...userPropsOnly];\n\n  if (haveRefProp) {\n    sortedProps.unshift('ref');\n  }\n\n  if (haveKeyProp) {\n    sortedProps.unshift('key');\n  }\n\n  return sortedProps;\n};\n","/* @flow */\n\nexport default function createPropFilter(\n  props: {},\n  filter: string[] | ((any, string) => boolean)\n) {\n  if (Array.isArray(filter)) {\n    return (key: string) => filter.indexOf(key) === -1;\n  } else {\n    return (key: string) => filter(props[key], key);\n  }\n}\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatTreeNode from './formatTreeNode';\nimport formatProp from './formatProp';\nimport mergeSiblingPlainStringChildrenReducer from './mergeSiblingPlainStringChildrenReducer';\nimport sortPropsByNames from './sortPropsByNames';\nimport createPropFilter from './createPropFilter';\nimport type { Options } from './../options';\nimport type { ReactElementTreeNode } from './../tree';\n\nconst compensateMultilineStringElementIndentation = (\n  element,\n  formattedElement: string,\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => {\n  const { tabStop } = options;\n\n  if (element.type === 'string') {\n    return formattedElement\n      .split('\\n')\n      .map((line, offset) => {\n        if (offset === 0) {\n          return line;\n        }\n\n        return `${spacer(lvl, tabStop)}${line}`;\n      })\n      .join('\\n');\n  }\n\n  return formattedElement;\n};\n\nconst formatOneChildren = (\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => element =>\n  compensateMultilineStringElementIndentation(\n    element,\n    formatTreeNode(element, inline, lvl, options),\n    inline,\n    lvl,\n    options\n  );\n\nconst onlyPropsWithOriginalValue = (defaultProps, props) => propName => {\n  const haveDefaultValue = Object.keys(defaultProps).includes(propName);\n  return (\n    !haveDefaultValue ||\n    (haveDefaultValue && defaultProps[propName] !== props[propName])\n  );\n};\n\nconst isInlineAttributeTooLong = (\n  attributes: string[],\n  inlineAttributeString: string,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean => {\n  if (!maxInlineAttributesLineLength) {\n    return attributes.length > 1;\n  }\n\n  return (\n    spacer(lvl, tabStop).length + inlineAttributeString.length >\n    maxInlineAttributesLineLength\n  );\n};\n\nconst shouldRenderMultilineAttr = (\n  attributes: string[],\n  inlineAttributeString: string,\n  containsMultilineAttr: boolean,\n  inline: boolean,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean =>\n  (isInlineAttributeTooLong(\n    attributes,\n    inlineAttributeString,\n    lvl,\n    tabStop,\n    maxInlineAttributesLineLength\n  ) ||\n    containsMultilineAttr) &&\n  !inline;\n\nexport default (\n  node: ReactElementTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const {\n    type,\n    displayName = '',\n    childrens,\n    props = {},\n    defaultProps = {},\n  } = node;\n\n  if (type !== 'ReactElement') {\n    throw new Error(\n      `The \"formatReactElementNode\" function could only format node of type \"ReactElement\". Given:  ${type}`\n    );\n  }\n\n  const {\n    filterProps,\n    maxInlineAttributesLineLength,\n    showDefaultProps,\n    sortProps,\n    tabStop,\n  } = options;\n\n  let out = `<${displayName}`;\n\n  let outInlineAttr = out;\n  let outMultilineAttr = out;\n  let containsMultilineAttr = false;\n\n  const visibleAttributeNames = [];\n\n  const propFilter = createPropFilter(props, filterProps);\n\n  Object.keys(props)\n    .filter(propFilter)\n    .filter(onlyPropsWithOriginalValue(defaultProps, props))\n    .forEach(propName => visibleAttributeNames.push(propName));\n\n  Object.keys(defaultProps)\n    .filter(propFilter)\n    .filter(() => showDefaultProps)\n    .filter(defaultPropName => !visibleAttributeNames.includes(defaultPropName))\n    .forEach(defaultPropName => visibleAttributeNames.push(defaultPropName));\n\n  const attributes = sortPropsByNames(sortProps)(visibleAttributeNames);\n\n  attributes.forEach(attributeName => {\n    const {\n      attributeFormattedInline,\n      attributeFormattedMultiline,\n      isMultilineAttribute,\n    } = formatProp(\n      attributeName,\n      Object.keys(props).includes(attributeName),\n      props[attributeName],\n      Object.keys(defaultProps).includes(attributeName),\n      defaultProps[attributeName],\n      inline,\n      lvl,\n      options\n    );\n\n    if (isMultilineAttribute) {\n      containsMultilineAttr = true;\n    }\n\n    outInlineAttr += attributeFormattedInline;\n    outMultilineAttr += attributeFormattedMultiline;\n  });\n\n  outMultilineAttr += `\\n${spacer(lvl, tabStop)}`;\n\n  if (\n    shouldRenderMultilineAttr(\n      attributes,\n      outInlineAttr,\n      containsMultilineAttr,\n      inline,\n      lvl,\n      tabStop,\n      maxInlineAttributesLineLength\n    )\n  ) {\n    out = outMultilineAttr;\n  } else {\n    out = outInlineAttr;\n  }\n\n  if (childrens && childrens.length > 0) {\n    const newLvl = lvl + 1;\n\n    out += '>';\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl, tabStop);\n    }\n\n    out += childrens\n      .reduce(mergeSiblingPlainStringChildrenReducer, [])\n      .map(formatOneChildren(inline, newLvl, options))\n      .join(!inline ? `\\n${spacer(newLvl, tabStop)}` : '');\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl - 1, tabStop);\n    }\n    out += `</${displayName}>`;\n  } else {\n    if (\n      !isInlineAttributeTooLong(\n        attributes,\n        outInlineAttr,\n        lvl,\n        tabStop,\n        maxInlineAttributesLineLength\n      )\n    ) {\n      out += ' ';\n    }\n\n    out += '/>';\n  }\n\n  return out;\n};\n","/* @flow */\n\nimport type { Key } from 'react';\nimport formatReactElementNode from './formatReactElementNode';\nimport type { Options } from './../options';\nimport type {\n  ReactElementTreeNode,\n  ReactFragmentTreeNode,\n  TreeNode,\n} from './../tree';\n\nconst REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = '';\nconst REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = 'React.Fragment';\n\nconst toReactElementTreeNode = (\n  displayName: string,\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactElementTreeNode => {\n  let props = {};\n  if (key) {\n    props = { key };\n  }\n\n  return {\n    type: 'ReactElement',\n    displayName,\n    props,\n    defaultProps: {},\n    childrens,\n  };\n};\n\nconst isKeyedFragment = ({ key }: ReactFragmentTreeNode) => Boolean(key);\nconst hasNoChildren = ({ childrens }: ReactFragmentTreeNode) =>\n  childrens.length === 0;\n\nexport default (\n  node: ReactFragmentTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const { type, key, childrens } = node;\n\n  if (type !== 'ReactFragment') {\n    throw new Error(\n      `The \"formatReactFragmentNode\" function could only format node of type \"ReactFragment\". Given: ${type}`\n    );\n  }\n\n  const { useFragmentShortSyntax } = options;\n\n  let displayName;\n  if (useFragmentShortSyntax) {\n    if (hasNoChildren(node) || isKeyedFragment(node)) {\n      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n    } else {\n      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;\n    }\n  } else {\n    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n  }\n\n  return formatReactElementNode(\n    toReactElementTreeNode(displayName, key, childrens),\n    inline,\n    lvl,\n    options\n  );\n};\n","/* @flow */\n\nimport formatReactElementNode from './formatReactElementNode';\nimport formatReactFragmentNode from './formatReactFragmentNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nconst jsxStopChars = ['<', '>', '{', '}'];\nconst shouldBeEscaped = (s: string) =>\n  jsxStopChars.some(jsxStopChar => s.includes(jsxStopChar));\n\nconst escape = (s: string) => {\n  if (!shouldBeEscaped(s)) {\n    return s;\n  }\n\n  return `{\\`${s}\\`}`;\n};\n\nconst preserveTrailingSpace = (s: string) => {\n  let result = s;\n  if (result.endsWith(' ')) {\n    result = result.replace(/^(.*?)(\\s+)$/, \"$1{'$2'}\");\n  }\n\n  if (result.startsWith(' ')) {\n    result = result.replace(/^(\\s+)(.*)$/, \"{'$1'}$2\");\n  }\n\n  return result;\n};\n\nexport default (\n  node: TreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (node.type === 'number') {\n    return String(node.value);\n  }\n\n  if (node.type === 'string') {\n    return node.value\n      ? `${preserveTrailingSpace(escape(String(node.value)))}`\n      : '';\n  }\n\n  if (node.type === 'ReactElement') {\n    return formatReactElementNode(node, inline, lvl, options);\n  }\n\n  if (node.type === 'ReactFragment') {\n    return formatReactFragmentNode(node, inline, lvl, options);\n  }\n\n  throw new TypeError(`Unknow format type \"${node.type}\"`);\n};\n","/* @flow */\n\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nexport default (node: TreeNode, options: Options): string =>\n  formatTreeNode(node, false, 0, options);\n","/* @flow */\n\nimport formatTree from './formatter/formatTree';\nimport parseReactElement from './parser/parseReactElement';\nimport type { Element as ReactElement } from 'react';\nimport type { Options } from './options';\n\nconst reactElementToJsxString = (\n  element: ReactElement<any>,\n  {\n    filterProps = [],\n    showDefaultProps = true,\n    showFunctions = false,\n    functionValue,\n    tabStop = 2,\n    useBooleanShorthandSyntax = true,\n    useFragmentShortSyntax = true,\n    sortProps = true,\n    maxInlineAttributesLineLength,\n    displayName,\n  }: Options = {}\n) => {\n  if (!element) {\n    throw new Error('react-element-to-jsx-string: Expected a ReactElement');\n  }\n\n  const options = {\n    filterProps,\n    showDefaultProps,\n    showFunctions,\n    functionValue,\n    tabStop,\n    useBooleanShorthandSyntax,\n    useFragmentShortSyntax,\n    sortProps,\n    maxInlineAttributesLineLength,\n    displayName,\n  };\n\n  return formatTree(parseReactElement(element, options), options);\n};\n\nexport default reactElementToJsxString;\n\nexport {\n  inlineFunction,\n  preserveFunctionLineBreak,\n} from './formatter/formatFunction';\n"],"names":["times","tabStop","Array","fill","join","this","sortObject","value","Date","RegExp","isArray","map","Object","keys","sort","reduce","result","key","createStringTreeNode","type","createNumberTreeNode","createReactElementTreeNode","displayName","props","defaultProps","childrens","createReactFragmentTreeNode","supportFragment","Boolean","Fragment","getReactElementDisplayName","element","name","noChildren","propsValue","propName","onlyMeaningfulChildren","children","filterProps","originalProps","cb","filteredProps","filter","forEach","parseReactElement","options","displayNameFn","React","isValidElement","Error","ref","search","Children","toArray","child","noRefCheck","inlineFunction","fn","toString","split","line","trim","preserveFunctionLineBreak","defaultFunctionValue","functionValue","showFunctions","inline","lvl","normalizedValue","stringifiedValue","prettyPrint","transform","currentObj","prop","originalResult","currentValue","formatTreeNode","formatFunction","replace","spacer","escape","s","formatPropValue","propValue","String","symbolDescription","valueOf","toISOString","isPlainObject","formatComplexDataStructure","hasValue","hasDefaultValue","defaultValue","usedValue","useBooleanShorthandSyntax","formattedPropValue","attributeFormattedInline","attributeFormattedMultiline","isMultilineAttribute","includes","previousNodes","currentNode","nodes","slice","length","previousNode","push","isKeyOrRefProps","shouldSortUserProps","haveKeyProp","haveRefProp","userPropsOnly","oneProp","sortedProps","unshift","createPropFilter","indexOf","compensateMultilineStringElementIndentation","formattedElement","offset","formatOneChildren","onlyPropsWithOriginalValue","haveDefaultValue","isInlineAttributeTooLong","attributes","inlineAttributeString","maxInlineAttributesLineLength","shouldRenderMultilineAttr","containsMultilineAttr","node","showDefaultProps","sortProps","out","outInlineAttr","outMultilineAttr","visibleAttributeNames","propFilter","defaultPropName","sortPropsByNames","attributeName","formatProp","newLvl","mergeSiblingPlainStringChildrenReducer","REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX","REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX","toReactElementTreeNode","isKeyedFragment","hasNoChildren","useFragmentShortSyntax","formatReactElementNode","jsxStopChars","shouldBeEscaped","some","jsxStopChar","preserveTrailingSpace","endsWith","startsWith","formatReactFragmentNode","TypeError","reactElementToJsxString","formatTree"],"mappings":"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"}